@model List<VacationSplit.Models.Category>

@section Styles {
    <style>


        .sidebar {
            background-color: #2F4F4F;
            height: 100vh;
            padding: 20px 0;
            color: #fff;
            border-right: 3px solid #fff;
            box-shadow: 5px 0px 15px rgba(0, 0, 0, 0.2);
        }


        .btn-primary {
            background-color: #2F4F4F;
            border-color: whitesmoke;
        }

        .btn-success {
            background-color: #CC5500;
            border-color: #CC5500;
        }

        .btn-primary:hover,
        .btn-primary:focus,
        .btn-primary:active {
            background-color: #CC5500;
            border-color: #CC5500;
        }

        .icon-nav {
            margin-right: 10px;
        }

        .nav-link {
            display: flex;
            align-items: center;
        }

        .main-content {
            background-color: #f4f4f4;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.2);
        }

        .table-responsive {
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.2);
            margin: 20px 0;
        }

        .table thead th {
            background-color: #2F4F4F;
            color: #fff;
        }
    </style>
}

<div class="row m-0">
    <div class="col-md-3 sidebar d-flex flex-column justify-content-center">
        <h2 class="text-center">Catégories</h2>
        <button type="button" id="add-button" class="btn btn-success mb-3">
            <i class="fas fa-plus"></i> Ajouter
        </button>
        <form asp-action="Create" id="add-form" class="d-none">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <label for="add-name">Nom :</label>
                <input type="text" id="add-name" name="Name" required class="form-control">
            </div>
            <button type="submit" class="btn btn-primary">Enregistrer</button>
        </form>
    </div>
    <div class="col-md-9 p-4 main-content">
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th class="text-right">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in Model)
                    {
                        <tr>
                            <td>
                                <div class="display-name">@category.Name</div>
                                <input type="text" class="edit-name form-control" value="@category.Name" style="display:none;">
                            </td>
                            <td class="text-right">
                                <button type="button" class="edit-button btn btn-primary" data-id="@category.Id">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="save-button btn btn-success" data-id="@category.Id" style="display:none;">
                                    <i class="fas fa-save"></i> Sauvegarder
                                </button>
                                <form asp-action="Delete" asp-route-id="@category.Id" class="d-inline" onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette catégorie ?')">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
                </thead>
            </table>
        </div>
    </div>
</div>

@section Scripts {

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('add-button').addEventListener('click', function (e) {
                e.preventDefault();
                document.getElementById('add-name').value = "";
                document.getElementById('add-form').classList.toggle('d-none');
            });

            let editButtons = document.getElementsByClassName('edit-button');
            Array.from(editButtons).forEach(function (button) {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    let id = this.getAttribute('data-id');
                    let row = this.closest('tr');
                    toggleElements(row);
                });
            });

            let saveButtons = document.getElementsByClassName('save-button');
            Array.from(saveButtons).forEach(function (button) {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    let id = this.getAttribute('data-id');
                    let row = this.closest('tr');
                    let newName = row.querySelector('.edit-name').value;

                    fetch('/Categories/Edit', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ Id: id, Name: newName }),
                    })
                        .then(function (response) {
                            if (response.ok) {
                                row.querySelector('.display-name').textContent = newName;
                                toggleElements(row);
                            } else {
                                console.error('Error:', response.status, response.statusText);
                            }
                        })
                        .catch(function (error) {
                            console.error('Fetch error:', error);
                        });
                });
            });

            function toggleElements(row) {
                Array.from(row.querySelectorAll('.display-name, .edit-name, .edit-button, .save-button')).forEach(function (el) {
                    el.style.display = (el.style.display === 'none') ? '' : 'none';
                });
            }
        });
    </script>
}



